{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Design Document","text":"<p>A web application designed for allotment holders looking to optimize their growing season. It provides a dynamic, personalized to-do list, helping users stay on top of crucial tasks like watering, feeding, pruning, and harvesting. </p> <p>With a collaborative grow guide database, users can share and discover the best techniques for different fruit and vegetable varieties. Plus, our innovative allotment blueprint tool allows users to map their growing space and plan efficient crop rotation. </p> <p>Designed as a progressive web app allowing for a seamless offline experience for gardeners in the field.</p>"},{"location":"authentication/","title":"Authentication","text":""},{"location":"authentication/#authentication-requirements","title":"Authentication Requirements","text":"<p>The applications is to contain a minimal amount of personal data. But, whilst minimal, users: emails, postal codes and passwords still require strong protective measures in place and steps to prevent users grow guides from being tampered with must be taken.</p> <p>As with all other aspects of the application the solution must run on Linux based operating systems and be free for commercial use. Whilst integrating with the modular architecture and able to scale appropriately. It must also be able to run alongside FastAPI &amp; PostgreSQL in a PWA that utilizes a modern front end framework for its user interface.</p> <p>Requirements:</p> <ul> <li> <p>Please refer to the High Level Requirements.</p> </li> <li> <p>Must integrate with PostgreSQL &amp; FastAPI.</p> </li> <li>Will need to integrate with a modern front end framework in order to deliver a progressive web app (PWA).</li> <li>Must accommodate Representational State Transfer (REST) architectural design principles.</li> <li>Must be able to support offline capabilities as allotments can be in areas of poor signal.</li> </ul> <p>Info</p> <p>There is currently only a need to authenticate users within the application as all admin owned data is to be managed at the data base layer, meaning an authorization solution is not required. However, the ability to implement a method of authorization in order to support admin activity later on must also be considered.</p>"},{"location":"authentication/#authentication-adr","title":"Authentication ADR","text":"<p>Decision record for the authentication solution the application is to utilize. The chosen solution, as with all other aspects of the application, must run on Linux based operating systems and be free for commercial use. Whilst integrating with the modular architecture and able to scale appropriately. It must also be able to run alongside FastAPI &amp; PostgreSQL in a PWA that utilizes a modern front end framework for its user interface.</p> <p>Outcome</p> <ul> <li> <p>Json Web Tokens (JWT)</p> <ul> <li> <p>Users will authenticate with a email and password. The backend is to then issue a JWT token that the client includes in subsequent requests. This token contains users claims and is verified on each request. This method of stateless authentication is well suited to scalable APIs however it does require the management of JWT on the client side.</p> </li> <li> <p>fastapi.security and Authlib are packages within the FastAPI ecosystem that supports this method of authorization. </p> <p>Info</p> <p>PyJWT is a lightweight alternative to Authlib, however it does not currently handle OAuth2 providers, excluding it from consideration in this use case as an external OAuth2 provider might be desirable in the future. Authlib also provides excellent offline capabilities in line with product requirements.</p> </li> </ul> </li> </ul> Alternatives <ol> <li> <p>Session-Based Authentication</p> <ul> <li> <p>Users will log in and the sever will store and manage session data. A session cookie is then sent to the client and the cookie is validated on each request. This method of authorization is relatively simple when compared to using JWT's, as the browser handles cookies. It is not as scalable long term though.</p> </li> <li> <p>fastapi-users and Starlette Session Middleware are packages within the FastAPI ecosystem that supports this method of authorization.  </p> </li> </ul> </li> <li> <p>OAuth2 &amp; JWTs with External Providers</p> <ul> <li> <p>Similar to OAuth2 with JWTs, users authenticate with an external provider (i.e. google, GitHub etc). This provider then issues an access token and the API verifies the token and retrieves user information with each request.</p> </li> <li> <p>Again Authlib can be used to facilitate this process alongside fastapi-login. However, it places an added dependency, that opens the door to requiring the ability to support the various third party providers out there.</p> </li> </ul> </li> </ol>"},{"location":"client_side/","title":"Client Side","text":""},{"location":"client_side/#client-side-requirements","title":"Client Side Requirements","text":"<p>The aim with the client side of the application, like the database and server side layers is to support the applications overall modular design by not being tightly coupled to the other architecture layers, whilst still enforcing data consistency and integrity. </p> <p>All while delivering a progressive web application experience to many concurrent end users by supporting offline capabilities in an accessible mobile first application with a simple yet effective user interface.</p> <p>Requirements:</p> <ul> <li> <p>Please refer to the High Level Requirements.</p> </li> <li> <p>Must integrate with a RESTful API written using the FastAPI framework.</p> </li> <li>Must be able to handle JWTs for user authentication provided from the sever side via fastapi.security and Authlib.</li> <li>Must be able to facilitate the creation of a Progressive Web App.<ul> <li>The developer is familiar with JavaScript/TypeScript based frameworks like React and Vue but open to other technologies.</li> <li>The developer is able to produce their own custom components or make use of component libraries like Mui, Tailwind and Bootstrap. But any library used must be free for commercial use.</li> </ul> </li> <li>Must be able to provide type safety and complete form validation for data consistency and integrity across the application.</li> <li>Must be able to provide offline capabilities and caching in order to accommodate users with allotments in low signal areas.</li> <li>The only required global state is authentication state, everything else can be handled with simple UI state.</li> </ul> <p>Info</p> <p>There is currently no suspected need for heavy data synchronization between the front and backend.</p> <p>Future Improvement</p> <p>Whilst the need for real time updates via push notifications is beyond the scope of a minimal viable product. The ability to deliver upon this is desired long term in order to create a feature rich application.</p> <p>Testing Considerations:</p> <ul> <li>Integration tests against the API are to be prioritized as these provide the most benefit in ensuring the modular architecture pieces together. </li> <li>In the instance custom components are created the testing of these should be prioritized over components built using the supporting tech stack.</li> </ul> <p>Info</p> <p>Testing the happy pathway is to be prioritized and deemed sufficient unless a bug is discovered that steers the application away from intended functionality. In this instance a test confirming the bug is no longer present is to be written first before a resolution is implemented, following Test Driven Development (TDD) principles and allowing for an automated check that the ensures the application does not regress in the future.</p>"},{"location":"client_side/#interfaces-required","title":"Interfaces Required","text":"<p>High level interface functionality accompanied by low fidelity designs.</p> <p></p>"},{"location":"client_side/#user-account-interfaces","title":"User Account Interfaces","text":"<p>High Priority</p> User Registration InterfaceUser Login InterfaceUser Owned Grow Guide InterfaceUser Allotment InterfaceUser Preference InterfaceUser Logout Interface <ul> <li>Ability for users to register an account within the application using an email address and password.<ul> <li>Users must also provide a first name and country code.</li> <li>Emails must be unique and singing up with an existing one should trigger the password reset flow.</li> </ul> </li> </ul> <ul> <li>Ability for users to sign into the application via email and password<ul> <li>Ability for users to request a password reset.</li> <li>Ability for users to trigger the registration window if they do not have an account.</li> </ul> </li> </ul> <ul> <li>A interface to list a users currently owned grow guides with a flow for activating/deactivating a guide. As well as a flow for deleting a guide that will also require an \"are you sure\" style confirmation. </li> <li>The individual items in the list are to be navigation items that lead to a dedicated interface for displaying the grow guide.</li> <li>The interface will also require a flow for creating a new grow guide.</li> <li>The interface will also require a toggle that provides users the ability to make a guide public or private.</li> </ul> <ul> <li>Ability for users to create an associated allotment by providing the following information: postal code, width and length.<ul> <li>Initially this interface will just be populated with placeholder text until a user submits the required information to create an associated allotment.</li> </ul> </li> <li>Ability for users to update the following information for their allotment: postal code, width and length.</li> </ul> Future Improvement <p>Further interfaces relating to a users allotment will be required when implementing the functionality to provide planting recommendations.</p> <ul> <li>Ability for users to nominate a day for for giving each type of feed.</li> </ul> <ul> <li>Ability for users to sign out the application</li> </ul> <p>Medium Priority</p> User Profile InterfaceUser Password Reset Interface <ul> <li>Ability for users to update their: first name, email address, password and country code.</li> </ul> <ul> <li>Ability for users to enter a new password, after having coming from the magic link provided via email to their registered address.</li> </ul> <p>Low Priority</p> User Notification Interface <ul> <li>The ability for users to control: type, method and frequency of notifications they receive. </li> </ul> <p>Please Note</p> <p>This is a low priority as automated notifications are not part of the minimal viable product. Additional database tables will also be required to provide this functionality. </p>"},{"location":"client_side/#family-interfaces","title":"Family Interfaces","text":"<p>Medium Priority</p> Botanical Group List InterfaceFamily Information Interface <ul> <li>A interface that lists the different botanical groups available within the application. Where each group is a dropdown that can be select to expand/collapse. When expanded it displays the families within that group below a recommend rotate years info section.<ul> <li>Each heading within the dropdown is to be a navigation link to a page informing on that family in detail.</li> </ul> </li> </ul> <ul> <li>A interface that displays the surrounding information for a specific family of fruit or vegetables. <ul> <li>The first section of information includes the families: Botanical Group, Recommended Rotation Years, Companion &amp; Antagonist families.</li> <li>The second section of information includes the common pests that effect the family and their treatment and prevention methods.</li> <li>The third section of information includes the common disease that effect the family and their: symptoms, treatment and prevention methods.</li> </ul> </li> </ul>"},{"location":"client_side/#grow-guide-interfaces","title":"Grow Guide Interfaces","text":"<p>High Priority</p> Grow Guide <ul> <li>A interface that presents the user with a overview of a specific varieties grow guide. This interface is to double up as the form for creating/editing the grow guide also.<ul> <li>For guides a user own there is to be a button that unlocks the guide for editing.<ul> <li>This mode will require a method of ensuring users pass validation per field of the form and a method of handling submissions failures in a friendly way.</li> </ul> </li> </ul> </li> </ul> <p>Low Priority</p> Public Grow Guides <ul> <li>A interfaces that lists all the publicly available grow guides for users to browse and use. As initial offering this screen should organize the available grow guides into botanical groups that are alphabetically sorted and the guides within each group are to be alphabetized again.<ul> <li>Long term this interface will want a comprehensive filter and search functionality.</li> </ul> </li> </ul> Future Improvement <p>When implemented, user interfaces for generating and viewing planting recommendations will also be required.</p>"},{"location":"client_side/#todo-interfaces","title":"ToDo Interfaces","text":"<p>High Priority</p> Weekly ToDo <ul> <li> <p>The interface that is to be considered the home page. This view will display, based on a users active varieties, their weekly tasks and where appropriate these weekly tasks are to be broken down into there specific days.</p> <ul> <li> <p>Weekly Tasks:</p> <ul> <li>What varieties can be sown.</li> <li>What varieties can be transplanted.</li> <li>What varieties can be harvested.</li> <li>What varieties need to be pruned.</li> <li>What varieties can be dug up and composted.<ul> <li>This task will be based of when a variety has reached the end of its harvest period and lifecycle.</li> </ul> </li> </ul> </li> <li> <p>Daily Tasks:</p> <ul> <li>What varieties need to be fed this week on what day.<ul> <li>Varieties that are to be fed, need to be grouped by feed type and this feed type highlighted.</li> </ul> </li> <li>What varieties need to be watered this week on what day.     ???+ tip \"Future Improvement\"         Long term this task be dictated via a live weather feed based on the users allotment postal/zip code.</li> </ul> </li> </ul> </li> <li> <p>Each user is to be able to select a desired week in order to view the past or future, with the default load week to be the present week.</p> </li> </ul> <p>Low Priority</p> Monthly ToDo <ul> <li>This view will display a high level overview based on a users active varieties, their monthly tasks, grouped by season.<ul> <li>These tasks are to include:<ul> <li>What varieties can be sown.</li> <li>What varieties can be transplanted.</li> <li>What varieties can be harvested.</li> <li>What varieties need to be pruned.</li> <li>What varieties can be dug up and composted.</li> </ul> </li> </ul> </li> <li>Each user is to be able to select a month in order to view the past or future, with the default load month to be the present.</li> </ul>"},{"location":"client_side/#client-side-adr","title":"Client Side ADR","text":"<p>There are several aspects to consider when deciding on the appropriate technologies to meet the client side requirements of the application. On top of adhering to the modular architecture principles, just as the rest of the application, with a solution that runs on Linux based operation systems using packages and libraries that are free for commercial use, that integrate with a FastAPI RESTful API that uses JWT for authentication, all whilst delivering a progressive web application experience to many concurrent users the individual layers of the client side must also be considered in isolation.</p> <p>Outcome</p> <p>Framework:</p> <ul> <li>React with TypeScript<ul> <li>React is a well suited framework for developing progressive web applications that allows for a component based architecture, with several state management options, that aligns well with the applications modular design. The frameworks strong support of TypeScript also allows for the enforcement of good data integrity.</li> <li>React hooks like useAuth and useContext also work well with the Authlib &amp; JWT authentication flow proposed in the server side solution.</li> </ul> </li> </ul> <p>UI Library:</p> <ul> <li>Tailwind CSS &amp; ShadCN<ul> <li>Tailwind provides utility first CSS, keeping styling modular and scalable. Its pairing with ShadCN allows for the provision of accessible, modern UI components.</li> </ul> </li> </ul> <p>State Management:</p> <ul> <li>React Query &amp; Context API<ul> <li>As the application will mostly fetch and cache data and there is no requirement for heavy real-time collaboration React Query is sufficient to provide caching for offline mode and the Context API will manage small, app wide states, like authentication.</li> </ul> </li> </ul> <p>API Communication:</p> <ul> <li>Fetch with Axios<ul> <li>Axios provides good error handling with automatic request/response transformation and built in request cancellation. Making it worth the complexity trade off when compared to the native Fetch API.</li> </ul> </li> </ul> <p>PWA Support:</p> <ul> <li>Workbox<ul> <li>Will generate service workers for caching API responses with support for background sync.</li> </ul> </li> </ul> <p>Form Handling:</p> <ul> <li>React Hook Form &amp; Zod<ul> <li>The application requires robust form validation for user-generated content. React Hook will reduce re-renders and improve performance, integrating well with TypeScript. Zod will provide a schema based validation that works with well with React Hook Form.</li> </ul> </li> </ul> Alternatives <p>Framework:</p> <ol> <li> <p>Vue3 with TypeScript</p> <ul> <li>A close second option. Whilst Vue offers simpler state management when compared to React and a cleaner two-way binding for forms, plus arguably better built in support for PWA's. It is a smaller eco system that is less performant for large scale applications.</li> </ul> </li> <li> <p>SvelteKit</p> <ul> <li>Svelte kit offers great performance as it compiles to vanilla JS, offering minimal runtime overhead. It also has build in support for PWAs. However, it is a immature framework with a weaker ecosystem when compared to React &amp; Vue. This is potentially a strong option if the application develops a requirement to have an extremely small runtime overhead in order to vertically scale.</li> </ul> </li> </ol> <p>UI Library:</p> <ol> <li>MUI (Material UI)<ul> <li>MUI is a feature rich component library created by Google that provides a polished UI out the box. However, it is extremely heavyweight and less customable compared to Tailwind &amp; ShadCN.</li> </ul> </li> </ol> <p>State Management:</p> <ol> <li>Redux<ul> <li>Redux is a global state management tool that scales well with strong developer tooling. The overhead is larger when compared to React Query &amp; Context API. It is also not ideal for caching. As the application does not require extensive global state management but does require extensive caching it is not a strong choice.</li> </ul> </li> </ol> <p>API Communication:</p> <ol> <li>GraphQL (Apollo Client)<ul> <li>Not a realistic choice as the server side of the application is optimized for a REST API. In the event the application migrates to a GraphQL API this would provide efficient data fetching by reducing over/under fetching issues seen in REST APIs.</li> </ul> </li> </ol> <p>PWA Support:</p> <ol> <li>Service Workers without Workbox<ul> <li>Whilst this would provide full control and remove a dependency it would increase the probability of errors.</li> </ul> </li> </ol> <p>Form Handling:</p> <ol> <li>Yup<ul> <li>Whilst Yup is a potential alternative to Zod it is less TypeScript friendly and not as flexible.</li> </ul> </li> </ol>"},{"location":"client_side/#client-side-design","title":"Client Side Design","text":""},{"location":"client_side/#components","title":"Components","text":"<p>Container-Presenter Pattern</p> <p>In order to keep the components listed below clean and separate logic from presentation, the container presenter pattern is to be utilized. Allowing for a \"smart\" container component to handle state, API calls and business logic with a \"dumb\" presenter component created in order to display data. This pattern also prevents re-renders when only the UI changes, improving performance.</p> <ol> <li>Header</li> <li>Footer</li> <li>Dropdown Component</li> <li>Option Slider</li> <li>Vertical Accordion </li> <li>Information Card</li> <li>Action Table</li> <li>Confirmation Modal</li> <li>Toggle</li> </ol> <p>Factory Pattern</p> <p>Form Component</p> <ul> <li>In order to ensure form validation is correct, inline with the applications data integrity principles, a reusable validation schema (Factory) is to be defined in a separate file. Within the form component itself this schema is to be utilized via Zod and React Hook Form in order to ensure consistent and reusable logic with minimal re-renders.</li> </ul>"},{"location":"client_side/#api-communication","title":"API Communication","text":"<p>Repository Pattern</p> <p>In order to separate API logic from UI, allowing for cleaner components, easier endpoint switching and the reduction of redundant calls. API logic is to be stored in its own separate service, within these services Axios is to be used to handle data retrieval from the server. React Query is to then be implemented when retrieving data through the service in order to cache queries.</p> <p>Cache-Aside Pattern</p> <p>In order to provide offline capabilities within the application Workbox is to be used to cache API responses on top of React Query. Improving performance and allowing for a progressive web application.</p>"},{"location":"client_side/#client-side-authentication","title":"Client Side Authentication","text":"<p>Observer &amp; Provider Pattern</p> <p>As user authentication is the only required global state ContextAPI is to be used in order to setup a auth provider. React Query can then observe this provider in order to update application state.</p>"},{"location":"client_side/#folder-structure","title":"Folder Structure","text":"<p>Feature-Based Folder Structure</p> <p>Due to the application having clearly defined interfaces that can be grouped into features, a feature based folder structure makes sense, allowing related logic to be kept together.</p> Vite &amp; React Application<pre><code>/frontend\n    /public\n        - Static assets that are served directly, i.e. a Favicon.\n    /src\n        /assets\n            - Resources that are imported directly into the code, i.e. a logo.\n        /components\n            /layouts\n                - Contains components that dictate page layouts.\n            /ui\n                - Contains UI components to use as interface building blocks.\n        /features\n            /user\n                - LoginForm.tsx\n                - RegisterForm.tsx\n                - UserService.tsx\n        /hooks\n            - useLogout.tsx\n        /lib\n            - utils.ts\n        /routes\n            - AppRoutes.tsx\n            - ProtectedRoutes.tsx\n        /services\n            - api.ts\n        /store\n            /auth\n                - AuthContext.tsx\n                - AuthProvider.tsx\n            /theme\n                - ThemeContext.tsx\n                - ThemeProvider.tsx\n        /types\n            - Common interfaces &amp; types, i.e. NavigationTypes.ts\n        - App.tsx\n        - global.css\n        - main.tsc\n        - vite-env.d.ts\n    - .env\n    - components.json\n    - index.html\n    - package-lock.json\n    - package.json\n    - tsconfig.app.json\n    - tsconfig.json\n    - tsconfig.node.json\n    - vite.config.ts\n</code></pre>"},{"location":"client_side/#typography","title":"Typography","text":"PrimaryFallback <p>Primary Heading</p> <ul> <li>Oswald</li> </ul> <p>Primary Text</p> <ul> <li>Noto Sans</li> </ul> <p>Fallback Heading</p> <ul> <li>Georgia</li> </ul> <p>Fallback Text</p> <ul> <li>Verdana</li> </ul>"},{"location":"client_side/#color-scheme","title":"Color Scheme","text":"Dark ModeLight ModeInteractions <p>Primary Text/Outline - White</p> <ul> <li>hex #ffffff</li> <li>oklch(100% 0 0)</li> <li> <p>rgb(255 255 255)</p> Tailwind Variables <p>--foreground, --card-foreground, --secondary-foreground, --sidebar-foreground, --popover-foreground, --accent-foreground, --sidebar-accent-foreground, --muted-foreground, --primary foreground, --sidebar-primary-foreground, --border, --sidebar-border,</p> </li> </ul> <p>Primary Dark - Dark Green</p> <ul> <li>hex #3c4a3e</li> <li>oklch(39.29% 0.0269 149.09)</li> <li> <p>rgb(60 74 62)</p> Tailwind Variables <p>--background</p> </li> </ul> <p>Secondary Dark - Black</p> <ul> <li>hex #000000</li> <li>oklch(0% 0 0)</li> <li> <p>rgb(0 0 0)</p> Tailwind Variables <p>--card, --secondary, --sidebar,</p> </li> </ul> <p>Tertiary Dark - Grey</p> <ul> <li>hex #9fafa1</li> <li>oklch(73.74% 0.0267 148.96)</li> <li> <p>rgb(159 175 161)</p> Tailwind Variables <p>--popover, --accent, --sidebar-accent,</p> </li> </ul> <p>Primary Text/Outline - Black</p> <ul> <li>hex #000000</li> <li>oklch(0% 0 0)</li> <li> <p>rgb(0 0 0)</p> Tailwind Variables <p>--foreground, --card-foreground, --secondary-foreground, --sidebar-foreground, --popover-foreground, --accent-foreground, --sidebar-accent-foreground, --muted-foreground, --primary foreground, --sidebar-primary-foreground, --border, --sidebar-border,</p> </li> </ul> <p>Primary Light - Off White</p> <ul> <li>hex #f0f2e6</li> <li>oklch(95.63% 0.016 114.38)</li> <li> <p>rgb(240 242 230)</p> Tailwind Variables <p>--background</p> </li> </ul> <p>Secondary Light - White</p> <ul> <li>hex #ffffff</li> <li>oklch(100% 0 0)</li> <li> <p>rgb(255 255 255)</p> Tailwind Variables <p>--card, --secondary, --sidebar,</p> </li> </ul> <p>Tertiary Light - Sand</p> <ul> <li>hex #81885a</li> <li>oklch(60.91% 0.0657 115.43)</li> <li> <p>rgb(129 136 90)</p> Tailwind Variables <p>--popover, --accent, --sidebar-accent,</p> </li> </ul> <p>Primary Active - Green</p> <ul> <li>hex #007333</li> <li>oklch(48.56% 0.133153 150.185)</li> <li> <p>rgb(0 115 51)</p> Tailwind Variables <p>--primary, --sidebar-primary,</p> </li> </ul> <p>Positive Action - Light Green</p> <ul> <li>hex #007a4e</li> <li>oklch(51.11% 0.116394 159.5934)</li> <li> <p>rgb(0 122 78)</p> Tailwind Variables <p>--input, --ring, --sidebar-ring,</p> </li> </ul> <p>Neutral Action - Blue</p> <ul> <li>hex #0076bb</li> <li>oklch(54.7% 0.1381 245.15)</li> <li> <p>rgb(0 118 187)</p> Tailwind Variables <p>--muted</p> </li> </ul> <p>Negative Action - Red</p> <ul> <li>hex #ba2c37</li> <li>oklch(52.2% 0.1777 22.14)</li> <li> <p>rgb(186 44 55)</p> Tailwind Variables <p>--destructive</p> </li> </ul>"},{"location":"database/","title":"Database Layer","text":""},{"location":"database/#database-requirements","title":"Database Requirements","text":"<p>The aim for the database layer of the application is to enforce data consistency and integrity as granular as possible. Whilst offering scalability in terms of ease of integration of new features, as well as scalability in terms of user base growth.</p> <p>The solution must also allow for modularity in the applications architecture such that new database technologies can be dropped in/out with minimal disruption to the other layers. </p> <p>Info</p> <p>This is important as a goal of the project is to deliver the ability to learn new technologies by using them to replace components of the application following the original design laid out in this document as a blueprint.</p> <p>Requirements:</p> <ul> <li>Please refer to the High Level Requirements.</li> </ul>"},{"location":"database/#tables","title":"Tables","text":"<p>Info</p> <p>Unless stated otherwise below, all <code>VARCHAR</code> fields will require a constraint that ensures no special characters are used aside from hyphens and a single space. As well as all characters are stored in lowercase.</p>"},{"location":"database/#disease-pests","title":"Disease &amp; Pests","text":"PestDiseaseSymptomInterventionPest TreatmentPest PreventionDisease TreatmentDisease PreventionDisease SymptomFamily PestFamily Disease <p>Holds the various types of pests.</p> <p>Note</p> <ul> <li>The notes field will not require the default <code>VARCHAR</code> constraint applied.</li> </ul> <p>Holds the various types of diseases.</p> <p>Note</p> <ul> <li>The notes field will not require the default <code>VARCHAR</code> constraint applied.</li> </ul> <p>Holds the various types of symptoms different diseases can exhibit.</p> <p>Note</p> <ul> <li>The symptom field will not require the default <code>VARCHAR</code> constraint applied.</li> </ul> <p>Holds methods of intervention used to treat or prevent the various disease and pests.</p> <p>Note</p> <ul> <li>The notes field will not require the default <code>VARCHAR</code> constraint applied.</li> </ul> <p>A junction table that uses a composite primary key for linking what intervention methods are used to treat each type of pest.</p> <p>A junction table that uses a composite primary key for linking what intervention methods are used to prevent each type of pest.</p> <p>A junction table that uses a composite primary key for linking what intervention methods are used to treat each type of disease.</p> <p>A junction table that uses a composite primary key for linking what intervention methods are used to prevent each type of disease.</p> <p>A junction table that uses a composite primary key for linking what symptoms different types of diseases exhibit.</p> <p>A junction table that uses a composite primary key for linking what pests effect each family.</p> <p>A junction table that uses a composite primary key for linking what diseases effect each family.</p>"},{"location":"database/#family","title":"Family","text":"Botanical GroupFamilyAntagonist FamilyCompanion Family <p>Holds the name and if applicable, the maximum years before crop rotation is required, for the different botanical groups, i.e. Nightshade, Brassicas etc.</p> <p>Holds the common name for varieties of fruit and vegetables, i.e. Tomatoes, Broccoli etc. Linking to the Botanical Group table via ID.</p> <p>A junction table that uses a composite primary key for linking what families should not be planted near each other. </p> <p>A junction table that uses a composite primary key for linking what families should be planted near each other. </p>"},{"location":"database/#user","title":"User","text":"UserUser AllotmentUser Active VarietiesUser Feed Day <p>Holds the minimum amount of unique user information required to provide the applications functionality.</p> <p>Note</p> <ul> <li>The user email &amp; password fields will not require the default <code>VARCHAR</code> constraint applied.</li> <li>The User First Name field will need the <code>VARCHAR</code> constraint applied with an additional rule, preventing the used of numbers also.</li> <li>When an user is removed from this table a cascading delete upon the: user active varieties, user feed day and user allotment tables will be required for data consistency.</li> </ul> Future Improvement <ul> <li>Long term the Country Code will be used in conjunction with the User Allotment table to provide live weather information to users.</li> </ul> <p>Holds the minimum amount of information, about a specific users allotment, linked to the User table via user ID, required to provide the applications functionality. This table enforces the rule that each user can only have one allotment.</p> Future Improvement <ul> <li>Allotment Postal / Zip code will be required to provide live weather information to users.</li> <li>Information about the users allotments width &amp; length will be required to provide planting recommendations to users.</li> <li>When the functionality for providing planting recommendations is implemented, users with multiple allotments will have to total the measurements to get recommendations across there entire area.</li> </ul> <p>A junction table that uses a composite primary key for storing what grow guides users are currently following.</p> <p>Note</p> <ul> <li>There is currently no method of preventing users from following multiple guides for same specific variety of plant, it is down to users themselves to monitor this.</li> <li>A trigger will be required at the database layer that when users activate varieties the User Feed Day table is checked to ensure they have a nominated day for the guides applicable feed. If there is no nominated day a default is to be added that can then be updated later on within the Users Preferences page later on. This ensures data consistency at both the database and backend layers.</li> </ul> <p>A junction table that uses a composite primary key for storing what day each unique users gives each type of plant food.</p>"},{"location":"database/#grow-guide","title":"Grow Guide","text":"VarietyLifecyclePlanting ConditionsFeedVariety Water DayFrequencyDayWeekMonthSeasonCountry Season <p>The predominate table end users interact with. Storing the grow guides. The application works on the concept of users planning their allotment activities on a weekly basis, these weekly activities can then be linked to specific days as well as months &amp; seasons referred to.</p> <p>Note</p> <ul> <li>The notes field will not require the default <code>VARCHAR</code> constraint applied.</li> <li>The first constraint this table will require, is that any time even a single column is altered the last updated column is set to the current datetime.</li> <li>The next constraint this table will require is that if either one of the following pairs exists the other must also:<ol> <li>Transplant Week Start &amp; Transplant Week End</li> <li>Prune Week Start &amp; Prune Week End</li> </ol> </li> <li>The same logic, in that if a single one exists so must the rest, applies to the following group of columns:<ol> <li>Feed ID - Feed Week Start - Feed Frequency</li> </ol> </li> <li>The final constraint this table needs, is one that ensures the combination of Owner ID &amp; Variety Name is unique.</li> <li>When a entry within this table is deleted a cascading delete upon the user active varieties and variety water day will be required.</li> </ul> <p>A reference table for the possible lifecycle's available when creating grow guides i.e. Perennial, Annual etc.</p> <p>A reference table for the possible planting conditions available when creating grow guides i.e. Sunny, Sheltered etc.</p> Future Improvement <ul> <li>Further table(s) will be required to allow for users to detail what portions of their allotment meet these conditions to provide more accurate planting recommendations.</li> </ul> <p>A reference table for the possible plant feeds available when creating grow guides i.e. Bone Meal, Tomato Feed etc.</p> <p>A junction table that uses a composite primary key for linking what day each variety detailed within a unique grow guide should be watered on.</p> <p>Note</p> <ul> <li>A trigger will be required at the database layer that ensures the amount of days nominated within this table, for a specific variety per week, is equal to that of the integer value stored in the column titled frequency days per year found in the Frequency table, that is linked within the Variety table via ID. To do this the amount of days in the Variety Water Day table will need to be multiplied by 52.</li> </ul> Future Improvement <ul> <li>This entire table will be dropped once live weather information is provided to users. In favour of using the Water Frequency columns on the Variety table to recommend to users when to water crops based on the weather in their Postal \\ Zip code.</li> </ul> <p>A table that holds different frequency units available for use when creating grow guides. i.e. a frequency of Weekly that means the activity would be performed 52 days across this year.</p> Future Improvement <p>This table will replace the Variety Water Day table as the predominate table for detailing watering activities when live weather monitoring is functional. Allowing for use cases like a certain variety needs watering every three days. The weather can then be monitored and if there has been no rainfall at the users allotment location within the last three days they will be prompted to water that variety.</p> <p>A reference table for the seven days of the week available when creating grow guides. Also provides a clear entry point when collecting specific information for daily tasks to provide to end users.</p> <p>A table that holds the 52 weeks of the year and their corresponding start and end dates in the format of <code>01/01, 07/01</code> etc. The month each unique week starts in is also stored to allow for easy collection of month specific activities.</p> <p>Note</p> <ul> <li>A check constraint will be required  to ensure the start &amp; end date columns meet this format.</li> <li>There will be one week that has a potential 8 days within it in order to handle leap years.</li> </ul> <p>A reference table for the twelve possible months for use when creating grow guides. Also provides a clear entry point for collecting month specific information to provide to end users.</p> <p>Note</p> <p>The application predominantly works on the concept of users planning their allotment activities on a weekly basis, these weekly activities can then be distributed across the seven available days. Due to this the Month table links to the Week table via ID.</p> <p>A reference table linked to the Country Seasons table via ID that stores the possible seasons available, i.e. Summer, Spring.</p> <p>A table that stores the start and end date for each season per unique country. These dates can then be referenced against the Week and User table for detailing seasonal activity to end users.</p> <p>Note</p> <ul> <li>The first check constraint this table will require is one to ensure the start &amp; end date columns meet the following format <code>01/01, 07/01</code>, as per the Week table.</li> <li>The next check constraint required is one that ensures for each unique country added, all four corresponding seasons are added at the same time.<ul> <li>It is up to database admins to ensure the start &amp; end dates for these seasons are correct due to the large variation between countries, but infrequent requirement of data being added.</li> </ul> </li> </ul>"},{"location":"database/#database-adr","title":"Database ADR","text":"<p>Decision record for the underlying database technology selected to support the project. When selecting the intended technology it is important to remember the proposed schema is heavily relational and the project has a requirement to run on Linux based systems with the desire to have the option to scale in support of 2.5 million unique users. The technology must also be free for commercial use.</p> <p>Outcome</p> <ul> <li>PostgreSQL<ul> <li>A relational database technology that is ACID compliant with a rich ecosystem. Meeting all the project requirements and offering extensible features like JSONB and support for complex relationships.</li> </ul> </li> </ul> Alternatives <ol> <li> <p>MySQL</p> <ul> <li>The second runner. Again a relational database technology with a broad ecosystem that suits applications with moderate complexity and offers a slightly lower barrier to entry that PostgreSQL and arguably more suited to type of web application being proposed within the project. However, there are potential barriers for commercial use.</li> </ul> </li> <li> <p>MongoDB</p> <ul> <li>A NoSQL database. As the projects data will be structured and not hierarchical, where ideally the schema does not change frequently, this is not suitable solution. The most likely database candidate for learning document based databases when the tertiary goal of having the project provide a template for learning new technologies is realized.</li> </ul> </li> <li> <p>CockroachDB</p> <ul> <li>A distributed SQL database that combines scalability of NoSQL with the consistency and relational capabilities of PostgreSQL. A strong candidate if PostgreSQL becomes a blocker to project scalability.</li> </ul> </li> </ol>"},{"location":"deployment/","title":"Deployment","text":""},{"location":"deployment/#deployment-adr","title":"Deployment ADR","text":"<p>Whilst the application is to prioritize vertical scaling over horizontal, in order to retain the ability to efficiently deploy to private severs if desired, the current intended deployment scenario is one that uses cloud infrastructure to run Docker containers. The chosen hosting provider must be able to support the deployment of React and FastAPI applications on top of a PostgreSQL database with the ability to scale to 2.5million users</p> <p>Outcome</p> <ul> <li>Fly.io<ul> <li>Fly.io provides a simple pathway for Docker based deployments, offering built in PostgreSQL, global distribution and good performance at the expense of customizability when compared to a provider like AWS.</li> </ul> </li> </ul> Alternatives <ol> <li> <p>Digital Ocean</p> <ul> <li>Whilst Digital Ocean provides full control over a cost effective environment it requires a manual setup and maintenance, something that isn't within scope of the project at this iteration. </li> </ul> </li> <li> <p>AWS</p> <ul> <li>Whilst AWS provide highly scalable managed severs the cost can spiral with this scale, making it a poor choice currently.</li> </ul> </li> </ol>"},{"location":"deployment/#deployment-process","title":"Deployment Process","text":"<ol> <li> <p>Containerize the FastAPI backend &amp; React Frontend.</p> </li> <li> <p>Push these containers to a GitHub container registry.</p> </li> <li> <p>Deploy to Fly.io.</p> </li> </ol> <p>Info</p> <p>This process can be automated using GitHub actions.</p>"},{"location":"implementation/","title":"Implementation","text":""},{"location":"implementation/#implementation","title":"Implementation","text":"<p>The application is to be implemented following the Walking Skeleton approach, allowing for a minimal end-to-end version to be completed early before then expanding upon it, the sequence of development is laid out below.</p>"},{"location":"implementation/#preliminary","title":"Preliminary","text":"<p>Info</p> <ul> <li>A Linux based operation system will be required that has PostgreSQL &amp; pgAdmin installed alongside UV and NPM for package management of Python and JavaScript libraries respectively. </li> <li>The system will also require Docker in order to run and manage containers</li> <li>A GitHub and Fly.io account will also be required for version control and hosting of the application.</li> <li>A code editor will also be required.</li> </ul>"},{"location":"implementation/#skeleton","title":"Skeleton","text":"<ol> <li> <p>Scaffold Code Repository Structure</p> <ul> <li> <p>The code is to be placed under version control in GitHub with a repository that includes the backend and frontend folders as well as a deployments folder to hold infrastructure as code files plus a documentation folder to house supporting documentation, like this design document.</p> <p>Info</p> <p>The design document is to be a MKDocs application hosted via GitHub pages.</p> </li> </ul> </li> <li> <p>Server Side Initial Setup</p> <ul> <li>A Minimal FastAPI application is to be implemented with a heath check endpoint.<ul> <li>Pydantic, Ruff and MyPy can be integrated at this point.</li> </ul> </li> </ul> </li> <li> <p>Database Integration</p> <ul> <li>SQLAlchemy is to be used to setup and migrate the database schema for the User table to a PostgreSQL database.<ul> <li>Pytest can be utilized at this point to allow for the automated integration testing of the server and database layers.</li> </ul> </li> </ul> </li> <li> <p>Authentication</p> <ul> <li>The User registration and login endpoints are to be created, allowing for the implementation of the JWT authentication solution using the Authlib and fastapi.security libraries.<ul> <li>This is also an ideal time to setup structlog as a logging system.</li> </ul> </li> </ul> </li> <li> <p>Client Side Initial Setup</p> <ul> <li>A React application is to be initialized with TypeScript &amp; Vite using React Router to create an initial dashboard, allowing for the introduction of Tailwind CSS and ShadCN UI components.<ul> <li>Biome can be integrated at this point</li> </ul> </li> </ul> </li> <li> <p>User Registration &amp; Login</p> <ul> <li>A login form is to be created, requiring the implementation of Axios for API queries along with an authentication context using the ContextAPI and the storing of JWT tokens using React Query. A registration form is to also be created, requiring ZOD and React Hook Form for validation.<ul> <li>MSW can be utilized now for API integration testing.</li> </ul> </li> </ul> </li> <li> <p>Containerization</p> <ul> <li>Both the front &amp; backend are to be containerized using Docker. With a <code>docker-compose.yml</code> configured for local development.</li> </ul> </li> <li> <p>CI</p> <ul> <li>GitHub actions are to be setup in order to automate builds.</li> </ul> </li> <li> <p>Deployment</p> <ul> <li>The application is to be deployed to Fly.io</li> </ul> </li> <li> <p>CD</p> <ul> <li>GitHub actions are to be setup in order to automate deployments</li> </ul> </li> </ol>"},{"location":"implementation/#meat","title":"Meat","text":"<ol> <li> <p>Botanical Group List Interface</p> Info <p>Will require the implementation of the Botanical Group table.</p> </li> <li> <p>Family Information Interface</p> Info <p>Will require the implementation of the Family and the Disease &amp; Pest group of tables. Will allow for the integration of Workbox for offline capabilities.</p> </li> <li> <p>User Allotment Interface</p> Info <p>Will require the implementation of the User Allotment table.</p> </li> <li> <p>User Preference Interface</p> Info <p>Will require the implementation of the Feed and User Feed Day tables. Data synchronizations for offline changes will need to be addressed here.</p> </li> <li> <p>Grow Guide</p> Info <p>Will require the implementation of the: Day, Week, Month, Lifecycle, Planting Conditions and Frequency tables followed by the Variety and Variety Water Day tables.</p> </li> <li> <p>User Owned Grow Guide Interface</p> Info <p>Will require the implementation of the User Active Varieties table.</p> </li> <li> <p>Weekly ToDo</p> </li> <li> <p>User Logout Interface</p> </li> <li> <p>User Password Reset Interface</p> </li> <li> <p>User Profile Interface</p> </li> <li> <p>User Notification Interface</p> Info <p>This will require a database migration in order to store a users notification preference.</p> </li> <li> <p>Public Grow Guides </p> </li> <li> <p>Monthly ToDo</p> Info <p>Will require the implementation of the Country Season and Season tables.</p> </li> </ol>"},{"location":"overview/","title":"High Level Requirements","text":""},{"location":"overview/#requirements","title":"Requirements","text":"<ul> <li>Every aspect off the application must run on Linux based operating system.</li> <li>All technologies, libraries and packages must be free for commercial use.</li> <li>The application is to be mobile first.</li> <li>The application is to be a Progressive Web App (PWA).</li> <li> <p>The applications architecture must ensure that the Client, Server and Database layers are not tightly coupled. So to to allow for the ease of replacing them with other technologies as desired.</p> <p>Info</p> <p>A goal of the project is to deliver upon the ability to use this document as a blueprint to reproduce aspects of the application in new technologies as a personal learning and development exercise.</p> </li> </ul>"},{"location":"overview/#key-considerations","title":"Key Considerations","text":""},{"location":"overview/#the-development-team","title":"The Development Team","text":"<ul> <li> <p>A personal project for a developer familiar with domain driven design, mainly using Python for server side code and modern JavaScript/TypeScript based frameworks for creating user interfaces built on top of relational databases. With a strong desire to use advanced design patterns.</p> </li> <li> <p>Able to working in CI/CD environments with agile delivery.</p> </li> </ul>"},{"location":"overview/#deployments","title":"Deployments","text":"<ul> <li> <p>The ability to vertically scale is to be prioritized over horizontal scaling as the option to efficiently deploy to private servers must always be available. </p> <p>Info</p> <p>However the current desired deployment scenario is one that uses Docker, hosted in a cloud environment.</p> </li> <li> <p>The application will be served by a single database so there is currently no need for eventual consistency.</p> <p>Info</p> <p>However the client and server side application are not to be tightly coupled so to allow for independent deployment inline with the modular architectural design.</p> </li> </ul>"},{"location":"overview/#user-base","title":"User Base","text":"<ul> <li>The age of a typical user is to be assumed to be between 35-75, due to this all aspects of the user interface must be intuitive and simple to use.</li> <li>There is an estimated 330,000 allotments in the UK, assuming each of these has a unique owner the initial scale that the application should be able to support is 10% or 33,000 users. </li> <li> <p>It should also be assumed that traffic peaks on the weekends, with the application to support many concurrent users, especially during summer months. Due to this the architecture should be able to facilitate 30,000 unique queries at a time initially.</p> <p>Info</p> <p>Due to the desired modularity in the applications architecture a solution to further scaling is the option of selecting a new underlying technology. However, if the initial technologies used can scale to roughly 2.5 million users with the ability to facilitate approximately 2.25 million unique queries at once it would be more than sufficient to support the entire market share of European allotments.</p> </li> </ul>"},{"location":"server_side/","title":"Server Side","text":""},{"location":"server_side/#server-side-requirements","title":"Server Side Requirements","text":"<p>The aim with the server side layer of the application, much like the database and client layers, is to support the applications overall modular design by not being tightly coupled to its neighbors, whilst still enforcing data consistency and integrity. </p> <p>All while delivering a fast and seamless \"request - response\" experience to many concurrent end users who are performing CRUD operations that require relatively simple business logic but complex queries with multiple joins.</p> <p>Requirements:</p> <ul> <li> <p>Please refer to the High Level Requirements.</p> </li> <li> <p>Must integrate with PostgreSQL.</p> </li> <li>Must support typing so to harmonize with the robust relation database schema proposed.</li> <li>Must be able to integrate with a user authentication system.</li> <li>Must integrate with a user interface that facilities user creation and Create, Read, Update &amp; Delete (CRUD) actions en masse.<ul> <li>Will need to integrate with a modern front end framework in order to deliver a progressive web app (PWA).</li> </ul> </li> <li>Must adhere to the Representational State Transfer (REST) architectural design principles.</li> <li>Must be able to accommodate server side caching in order to support offline capabilities as allotments can be in areas of poor signal.</li> <li>Must be able to support push notifications and automated email in order to implement a feature rich application.<ul> <li>Must be able to support batch processing in order to send these notifications.</li> </ul> </li> </ul> <p>Testing Considerations:</p> <ul> <li>Unit tests that confirm the Server Side solution enforces the stipulated data consistency will be required such that the architectural goal of modularity can be realized.</li> <li>Integration tests against the PostgreSQL database would also be beneficial.</li> </ul> <p>Info</p> <p>Testing the happy pathway is to be prioritized and deemed sufficient unless a bug is discovered that steers the application away from intended functionality. In this instance a test confirming the bug is no longer present is to be written first before a resolution is implemented, following Test Driven Development (TDD) principles and allowing for an automated check that the ensures the application does not regress in the future.</p>"},{"location":"server_side/#routes-required","title":"Routes Required","text":""},{"location":"server_side/#user-tables","title":"User Tables","text":"UserUser Allotment <p>Ability to create a user account with email and password that can have a first name and country code assigned to it. This information should be editable by the associated user and thus must be readable also.</p> <p>Ability for users to create an associated allotment. The details required for this allotment include a zip or postal code along with a width and length measurement. These fields must be editable by the associated user and thus must also be readable.</p> Future Improvement <p>The ability for users to be able to trigger a cascading delete of all their related data would also be desirable but currently not a strict requirement as this can be done manually. The effected tables are: user, user active varieties, user feed day, variety water day and the user allotment table.</p>"},{"location":"server_side/#disease-pest-family-tables","title":"Disease, Pest &amp; Family Tables","text":"<p>Ability to read from the following tables found within the database:</p> <ol> <li>Intervention</li> <li>Pest Treatment</li> <li>Pest Prevention</li> <li>Disease Treatment</li> <li>Disease Prevention</li> <li>Pest</li> <li>Disease</li> <li>Symptom</li> <li>Family Pest</li> <li>Family Disease</li> <li>Disease Symptom</li> <li>Family</li> <li>Botanical Group</li> <li>Antagonist Family</li> <li>Companion Family </li> </ol> Future Improvement <p>There is only a requirement for read routes on these tables as the data stored within them is to be owned by the projects data base administrators and can be updated manually at the database layer via SQL if required. The ability to abstract this out into an administrators section later on is desirable though as this will allow for more efficient scaling. </p>"},{"location":"server_side/#grow-guide-tables","title":"Grow Guide Tables","text":"Grow GuidesActivate GuidePublish GuideFeed Day'sSupporting Tables <p>The Variety table is the main table users will interact with and the data within it forms the backbone off the application. It will utilize the applications authentication solution to allow users to perform complete CRUD operations on the data contained within it. Only a authenticated Users who's ID matches the owner column of a pre exiting row can alter any data within that row. The complexities of this table that the server side service would need to accommodate include:</p> <ol> <li>If either one of the following pairs exists the other must also:<ol> <li>Transplant Week Start &amp; Transplant Week End</li> <li>Prune Week Start &amp; Prune Week End</li> </ol> </li> <li>The same logic, in that if a single one exists so must the rest, applies to the following group of columns:<ol> <li>Feed ID - Feed Week Start - Feed Frequency</li> </ol> </li> <li>When a entry within this table is deleted a cascading delete upon the user active varieties and variety water day will be required.</li> </ol> <p>Users will require the ability to set the grow guides they own to active and/or inactive. This action will require a route that can read, create and delete entries from the User Active Varieties junction table.</p> <p>Users will also require the ability to make guides they own public/private.     - The ability for users to copy public guides will also be required.</p> <p>Users will require the ability to alter the day they give a nominated feed type. This will require a read and update route that manipulates entries in the User Feed Day table.</p> <p>Ability to read from the following tables found within the database:</p> <ol> <li>Lifecycle</li> <li>Week</li> <li>Month</li> <li>Day</li> <li>Planting Conditions</li> <li>Feed</li> <li>Frequency</li> <li>Country Season</li> <li>Season</li> </ol> Future Improvement <p>There is only a requirement for read routes on these tables as the data stored within them is to be owned by the projects data base administrators and can be updated manually at the database layer via SQL if required. The ability to abstract this out into an administrators section later on is desirable though as this will allow for more efficient scaling.</p>"},{"location":"server_side/#todo-routes","title":"ToDo Routes","text":"<p>Info</p> <p>The main use case for the application is that users can create and follow grow guides and based upon these guides, have the application produce a todo list of activities they must undertake. These todo lists are split into levels.</p> Weekly &amp; DailyMonthly &amp; Seasonal <p>A route will be required that uses the Weeks table, joined to the Variety Table which is then joined to the: User Active Varieties, Feed Table and the Frequency table in order to provide users with a list of weekly tasks.</p> <p>The Day table is then joined in order to provide users with a list of daily todos across a specific week.</p> <p>A route will be required that uses the Month table, joined to the Variety Table which is then joined to the: User Active Varieties, Feed Table and the Frequency table in order to provide users with a list of monthly tasks.</p> <p>This level can then be referenced against the Season and Country Season tables in order to provide a list of seasonal tasks.</p> Future Improvement <p>These todos, whilst surfaced in the application for users to interact with, will also eventually be able to be sent out as a notification via Email or Push Notifications.</p>"},{"location":"server_side/#general-data-integrity-rules","title":"General Data Integrity Rules","text":"<p>A method for ensuring no special characters, aside from hyphens and a single space are used, as well as all characters are lower case will be required. That is to be applied to most text based columns, aside from those designated to store notes.</p> <p>Please Note</p> <p>Notes columns are not idea in relational databases and it is to be an ongoing effort to look at the content users are storing within these columns in an effort to provide a more efficient solution.</p>"},{"location":"server_side/#server-side-architecture","title":"Server Side Architecture","text":""},{"location":"server_side/#design-patterns","title":"Design Patterns","text":""},{"location":"server_side/#repository-pattern","title":"Repository Pattern","text":"<p>Purpose</p> <p>Encapsulate data access logic via SQL queries or ORM logic and provide abstraction over database queries by hiding implementation details from the service layer.</p> <p>Boundary</p> <p>Operates at the Database Layer, Interacting only with the database and should not contain business logic or handle transactions.</p> <p>Design</p> <p>A Repository class is created for each aggregate or related table group.</p> <p>Required Repositories include:</p> UserFamilyDisease &amp; PestsGrow Guide <p>User Repository </p> <ul> <li>To encapsulate the: User, User Allotment, User Feed Day and User Active Varieties tables.</li> </ul> <p>Family Repository</p> <ul> <li>To encapsulate the: Family, Botanical Group, Family Antagonist &amp; Family Companion tables.</li> </ul> <p>Pest Repository</p> <ul> <li>To encapsulate the: Pest, Pest Treatment, Pest Prevention and Family Pest tables.</li> </ul> <p>Disease Repository</p> <ul> <li>To encapsulate the: Disease, Disease Treatment, Disease Prevention, Symptom, Disease Symptom and Family Disease tables.</li> </ul> <p>Intervention Repository</p> <ul> <li>To encapsulate the Intervention table.</li> </ul> <p>Variety Repository</p> <ul> <li>To encapsulate the: Variety, Variety Water Day, Planting Conditions, Feed, Lifecycle and Frequency tables.</li> </ul> <p>Seasonal Repository</p> <ul> <li>To encapsulate the Country Season and Season tables.</li> </ul> <p>Day Repository</p> <ul> <li>To encapsulate the Day table.</li> </ul> <p>Week Repository</p> <ul> <li>To encapsulate the Week table.</li> </ul> <p>Month Repository</p> <ul> <li>To encapsulate the Month table.</li> </ul>"},{"location":"server_side/#unit-of-work","title":"Unit of Work","text":"<p>Purpose</p> <p>Groups multiple repository operations into a single transaction, ensuring atomicity and consistency when committing or rolling back operations.</p> <p>Boundary</p> <p>Only interacts with Repositories at the Service Layer.</p> <p>Design</p> <p>Unit of Work classes are created to manage transactions and ensure multiple database operations occur as a single unit.</p> <p>Required classes include:</p> Grow Guide <p>User Weekly ToDo</p> <ul> <li>Used to group the: Day, Week, Variety and User repositories when providing users their weekly tasks.</li> </ul> <p>User Monthly ToDo</p> <ul> <li>Used to group the: Month, Variety, User and Seasonal repositories when providing users their monthly tasks.</li> </ul> <p>Family Page</p> <ul> <li>Used to group the: Family, Disease, Pest and Intervention repositories in order to populate a specific families information page.</li> </ul>"},{"location":"server_side/#factory-pattern","title":"Factory Pattern","text":"<p>Purpose</p> <p>Apply any business rules or validations before persistence, ensuring the persistence of invalid objects by repositories is prevented.</p> <p>Boundary</p> <p>Prepares objects at the Domain Layer before they are passed to the Repositories or Unit of Work classes.</p> <p>Design</p> <p>The Factory pattern is used to simplify the creation of complex domain objects with all required fields validated and constraints applied.</p> <p>The required Factories include:</p> UserGrow Guide <ul> <li> <p>User Factory</p> </li> <li> <p>User Allotment Factory</p> </li> </ul> <ul> <li>Variety Factory</li> </ul>"},{"location":"server_side/#workflow","title":"Workflow","text":""},{"location":"server_side/#create-update","title":"Create &amp; Update","text":"<p>Example</p> <ol> <li> <p>Service Layer</p> <ul> <li>Invokes a Factory located at the Domain Layer for object validation.</li> </ul> </li> <li> <p>Service Layer</p> <ul> <li>Starts a Unit of Work to handle the transaction. Passing it the validated object.</li> <li>This Unit of Work handles the interactions between the validated object and relevant Repositories.</li> </ul> </li> <li> <p>Database Layer</p> <ul> <li>The relevant Repository class's execute database operations.</li> </ul> </li> <li> <p>Service Layer</p> <ul> <li>The Unit of Work class finalizes the integration between object and repository(s). committing successful transactions or rolling back failures.</li> </ul> </li> </ol>"},{"location":"server_side/#read-delete","title":"Read &amp; Delete","text":"<p>Complex Example</p> <ol> <li> <p>Service Layer</p> <ul> <li>Starts a Unit of Work to handle the operation. This Unit of Work handles the interactions between the relevant Repositories.</li> </ul> </li> <li> <p>Database Layer</p> <ul> <li>The relevant Repository class's execute database operations.</li> </ul> </li> <li> <p>Service Layer</p> <ul> <li>The Unit of Work class finalizes the integration between relevant repositories. returning or removing the requested data.</li> </ul> </li> </ol> <p>Simple Example</p> <ol> <li> <p>Service Layer</p> <ul> <li>Invokes the required Repository class.</li> </ul> </li> <li> <p>Database Layer</p> <ul> <li>The Repository class executes database operations.</li> </ul> </li> <li> <p>Service Layer</p> <ul> <li>The requested data is returned or removed.</li> </ul> </li> </ol>"},{"location":"server_side/#folder-structure","title":"Folder Structure","text":"<p>Pattern-Based Folder Structure</p> <p>Due to the server-side being a FastAPI application that has a well defined architecture that makes use of specified design patterns the following folder structure makes sense, allowing related logic to be kept together.</p> FastAPI &amp; Python Application<pre><code>/app\n    /api\n        /core\n            - config.py\n            - database.py\n            - limiter.py\n            - logging.py\n        /middleware\n            - exception_handler.py\n            - logging_middleware.py\n        /models\n            - Contains the Database Models.\n        /repositories\n            - Encapsulate data access logic via SQL/ORM logic abstracting it into \"Repositories\".\n        /schemas\n            - Contains the \"Factories\" or schemas that apply business rules and/or validation before persistence.\n        /services\n            - Contains the \"Units Of Work\" for grouping multiple repository operations into a single transaction.\n        /v1\n            - Contains the API Endpoints.\n    /keys\n        - private.pem\n        - public.pem\n    - main.py\n    - settings.yaml\n</code></pre>"},{"location":"server_side/#server-side-adr","title":"Server Side ADR","text":"<p>Decision record for the server side technologies selected to support the project. When selecting the intended technologies it is important to remember the project requires a modular, scalable and maintainable architecture to support a progressive web app. The server side must run on Linux based operating systems using technologies that are free for commercial use and can integrate with a PostgreSQL database via a RESTful API with support for user authentication. The technologies must also handle many concurrent users that require a high-read workload, caching is also required to support this as well as background tasks.</p> <p>Outcome</p> <ul> <li> <p>Python &amp; FastAPI</p> <ul> <li> <p>Python is well suited for Domain-Drive-Design (DDD) and can be written to provide strong typing support. The team are also familiar with the language already.</p> </li> <li> <p>FastAPI is a high performance asynchronous framework, that automatically generates API documentation and can handle many concurrent users and provides strong typing support via Pydantic. SQLAlchemy, Authlib and Redis can be used to handle PostgreSQL and 2 &amp; multiple methods of user authentication as well as caching support. Celery can also be used to support background tasks. However it does not provide an out the box admin panel, this is not a strict requirement currently though.</p> </li> </ul> </li> </ul> Alternatives <ol> <li> <p>TypeScript &amp; NextJS</p> <ul> <li> <p>TypeScript is an extremely type safe language that the team do have experience with already and its use would allow them to use the same programming language on the Client &amp; Server sides. However the ecosystem is less mature for PostgreSQL integration than when compared to the Python ecosystem</p> </li> <li> <p>NextJS is a highly modular and scalable framework that offers TypeORM for support in writing database queries that would adhere to the Repository Pattern. As well as integrating with Redis for caching and BullMQ for background tasks. Passport.js could also be used to provide authentication/authorization support.</p> </li> </ul> </li> <li> <p>Python &amp; Django</p> <ul> <li> <p>Python is well suited for Domain-Drive-Design (DDD) and can be written to provide strong typing support. The team are also familiar with the language already.</p> </li> <li> <p>Django is a mature, synchronous by default framework, that is extremely secure and comes with its own ORM that is relatively simple to use when compared to SQLAlchemy as well as an out the box admin panel. However it is more suited to monolithic applications and will be less performant when compared to FastAPI in supporting many concurrent users.</p> </li> </ul> </li> <li> <p>Go &amp; Fiber / Gin</p> <ul> <li> <p>Go is an extremely fast concurrent language that is compiled. Offering low memory usage ideally suited for microservices ran on cloud infrastructure. However Go does not allow for exceptions and all error handling is done manually.</p> </li> <li> <p>Fiber is a lightweight framework and Gin is a popular and flexible framework. Both will integrate with Redis for caching support and PGX driver for PostgreSQL integration. However the support for ORM's and OAuth2 compliant authentication is low maturity when compared to the other options.</p> </li> </ul> </li> </ol>"},{"location":"tech_stack/","title":"Tech Stack","text":"Layer Technology Version Purpose Operating System Ubuntu 24.04 Manage Computer Process Database PostgreSQL 16 Database Database pgAdmin4 9.1 Database Management Server Python 3.13 Coding Language Server UV 0.6.3 Package Management Server FastAPI 0.115 Backend Framework Server SQLAlchemy 2.0.38 ORM Server asyncpg 0.30.0 Database Driver Server Alembic 1.15.1 Database Migrations Server Pydantic 2.10.6 Typing Server pydantic-settings 2.8.1 Settings Management Server Authlib 1.5.1 Authentication Server psutil 7.0.0 Resource Monitoring Server strutlog 25.2.0 Application Logging Server bcrypt 4.3.0 Password Hashing Server email-validator 2.2.0 Email Validation Server slowapi 0.1.9 Rate Limiting Server Pytest 8.3.5 Test Runner Server Ruff 0.9.10 Formatting &amp; Linting Server MyPy 1.15 Type Checking Client TypeScript 5.7.2 Coding Language Client NPM 10.9.2 Package Management Client Node 22.14.0 JavaScript Runtime Client Vite 6.2.0 Build Tool Client React 19.0.0 Frontend Framework Client React Query 5.69.0 State Management Client Tailwind CSS 4.0.15 CSS Library Client Radix UI (React Switch) 1.1.3 UI Library Client ShadCN 2.4.0 UI Library Client Lucide-React 0.483.0 Icon Library Client Axios 1.8.4 API Communication Client Workbox 7.3.0 Service Workers Client ZOD 3.24.2 Form Validation Client React Hook Form 7.54.2 Form Validation Client Biome 1.9.4 Formatting &amp; Linting Client MSW API Integration Testing Client TSL Component Testing Client Vitest Component Testing Deployment Docker Containerization Deployment Fly.io Hosting Deployment GitHub Version Control Deployment GitHub Actions CI/CD"}]}